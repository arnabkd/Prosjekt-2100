1:  # Et minimalt testprogram:
2: # Det ber om et tall v og skriver ut v+1.
Parser:  <program>
Parser:    <func decl>
4: int main () {
Parser:      <statm list>
Parser:        <call-statm>
Parser:          <function call>
Parser:            <expr list>
Parser:              <expression>
Parser:                <number>
Parser:                </number>
Parser:              </expression>
Parser:            </expr list>
Parser:          </function call
Parser:        </call-statm>
Parser:        <call-statm>
Parser:          <function call>
5:    putchar('?');  putchar(' ');
Parser:            <expr list>
Parser:              <expression>
Parser:                <number>
Parser:                </number>
Parser:              </expression>
Parser:            </expr list>
Parser:          </function call
Parser:        </call-statm>
Parser:        <call-statm>
Parser:          <function call>
Parser:            <expr list>
Parser:              <expression>
Parser:                <function call>
Parser:                  <expr list>
Parser:                    <expression>
Parser:                    </expression>
Parser:                  </expr list>
Parser:                </function call
Parser:                <operator>
Parser:                </operator>
Parser:                <number>
Parser:                </number>
Parser:              </expression>
Parser:            </expr list>
Parser:          </function call
Parser:        </call-statm>
Parser:        <call-statm>
Parser:          <function call>
6:    putint(getint()+1);  putchar(10 /*= LF*/);
Parser:            <expr list>
Parser:              <expression>
Parser:                <number>
7: }
Parser:                </number>
Parser:              </expression>
Parser:            </expr list>
Parser:          </function call
Parser:        </call-statm>
Parser:      </statm list>
Parser:    </func decl>
Parser:  </program>
Tree:		int main()
Tree:		{
Tree:			putchar(63);putchar(32);putint(getint()+1);putchar(10);}
