1:  # Program 'gcd'
2: # -------------
3: # A program to compute the greatest common divisor.
Scanner : intToken 
Scanner : nameToken LF
Scanner : semicolonToken 
5: int LF;  /* Line feed */
Scanner : intToken 
Scanner : nameToken gcd
Scanner : leftParToken 
Scanner : intToken 
Scanner : nameToken a
Scanner : commaToken 
Scanner : intToken 
Scanner : nameToken b
7: int gcd (int a, int b)
Scanner : rightParToken 
Scanner : leftCurlToken 
8: {  /* Computes the gcd of a and b. */
Scanner : whileToken 
Scanner : leftParToken 
Scanner : nameToken a
Scanner : notEqualToken 
Scanner : nameToken b
Scanner : rightParToken 
10:    while (a != b) {
Scanner : leftCurlToken 
Scanner : ifToken 
Scanner : leftParToken 
Scanner : nameToken a
Scanner : lessToken 
Scanner : nameToken b
Scanner : rightParToken 
11:       if (a < b) {
Scanner : leftCurlToken 
Scanner : nameToken b
Scanner : assignToken 
Scanner : nameToken b
Scanner : subtractToken 
Scanner : nameToken a
12: 	 b = b-a;
Scanner : semicolonToken 
Scanner : rightCurlToken 
Scanner : elseToken 
13:       } else {
Scanner : leftCurlToken 
Scanner : nameToken a
Scanner : assignToken 
Scanner : nameToken a
Scanner : subtractToken 
Scanner : nameToken b
14: 	 a = a-b;
Scanner : semicolonToken 
15:       }
Scanner : rightCurlToken 
16:    }
Scanner : rightCurlToken 
Scanner : nameToken return
Scanner : nameToken a
17:    return a;
Scanner : semicolonToken 
18: }
Scanner : rightCurlToken 
Scanner : intToken 
Scanner : nameToken main
Scanner : leftParToken 
20: int main ()
Scanner : rightParToken 
Scanner : leftCurlToken 
21: {  
Scanner : intToken 
Scanner : nameToken v
Scanner : numberToken 1
Scanner : semicolonToken 
Scanner : intToken 
Scanner : nameToken v
Scanner : numberToken 2
22:    int v1;  int v2;
Scanner : semicolonToken 
Scanner : nameToken LF
Scanner : assignToken 
Scanner : numberToken 10
Scanner : semicolonToken 
24:    LF = 10; ;
Scanner : semicolonToken 
Scanner : nameToken putchar
Scanner : leftParToken 
Scanner : numberToken 63
Scanner : numberToken 41
Scanner : semicolonToken 
Scanner : nameToken putchar
Scanner : leftParToken 
Scanner : numberToken 32
Scanner : numberToken 41
25:    putchar('?');  putchar(' ');
Scanner : semicolonToken 
Scanner : nameToken v
Scanner : numberToken 1
Scanner : assignToken 
Scanner : nameToken getint
Scanner : leftParToken 
Scanner : rightParToken 
Scanner : semicolonToken 
Scanner : nameToken v
Scanner : numberToken 2
Scanner : assignToken 
Scanner : nameToken getint
Scanner : leftParToken 
Scanner : rightParToken 
26:    v1 = getint();   v2 = getint();
Scanner : semicolonToken 
Scanner : nameToken putint
Scanner : leftParToken 
Scanner : nameToken gcd
Scanner : leftParToken 
Scanner : nameToken v
Scanner : numberToken 1
Scanner : commaToken 
Scanner : nameToken v
Scanner : numberToken 2
Scanner : rightParToken 
Scanner : rightParToken 
Scanner : semicolonToken 
Scanner : nameToken putchar
Scanner : leftParToken 
Scanner : nameToken LF
Scanner : rightParToken 
27:    putint(gcd(v1,v2));  putchar(LF);
Scanner : semicolonToken 
Scanner : nameToken exit
Scanner : leftParToken 
Scanner : numberToken 0
Scanner : rightParToken 
28:    exit(0);
Scanner : semicolonToken 
29: }
Scanner : rightCurlToken 
Scanner : eofToken 
