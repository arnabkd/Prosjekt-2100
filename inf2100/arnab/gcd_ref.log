   1: # Program 'gcd'
   2: # -------------
   3: # A program to compute the greatest common divisor.
   4: 
   5: int LF;  /* Line feed */
Parser:   <program>
Parser:     <var decl>
   6: 
   7: int gcd (int a, int b)
Parser:     </var decl>
Parser:     <func decl>
Parser:       <param decl>
Parser:       </param decl>
Parser:       <param decl>
   8: {  /* Computes the gcd of a and b. */
   9: 
  10:    while (a != b) {
Parser:       </param decl>
Parser:       <func body>
Parser:         <statm list>
Parser:           <statement>
Parser:             <while-statm>
Parser:               <expression>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <operator>
Parser:                 </operator>
Parser:                 <variable>
  11:       if (a < b) {
Parser:                 </variable>
Parser:               </expression>
Parser:               <statm list>
Parser:                 <statement>
Parser:                   <if-statm>
Parser:                     <expression>
Parser:                       <variable>
Parser:                       </variable>
Parser:                       <operator>
Parser:                       </operator>
Parser:                       <variable>
  12: 	 b = b-a;
Parser:                       </variable>
Parser:                     </expression>
Parser:                     <statm list>
Parser:                       <statement>
Parser:                         <assign-statm>
Parser:                           <assignment>
Parser:                             <variable>
Parser:                             </variable>
Parser:                             <expression>
Parser:                               <variable>
Parser:                               </variable>
Parser:                               <operator>
  13:       } else {
Parser:                               </operator>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </expression>
Parser:                           </assignment>
Parser:                         </assign statm>
Parser:                       </statement>
Parser:                     </statm list>
  14: 	 a = a-b;
Parser:                     <else-part>
Parser:                       <statm list>
Parser:                         <statement>
Parser:                           <assign-statm>
Parser:                             <assignment>
Parser:                               <variable>
Parser:                               </variable>
Parser:                               <expression>
Parser:                                 <variable>
Parser:                                 </variable>
Parser:                                 <operator>
  15:       }
Parser:                                 </operator>
Parser:                                 <variable>
  16:    }
Parser:                                 </variable>
Parser:                               </expression>
Parser:                             </assignment>
  17:    return a;
Parser:                           </assign statm>
Parser:                         </statement>
Parser:                       </statm list>
Parser:                     </else-part>
Parser:                   </if-statm>
Parser:                 </statement>
Parser:               </statm list>
Parser:             </while-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <return-statm>
  18: }
Parser:               <expression>
Parser:                 <variable>
  19: 
  20: int main ()
Parser:                 </variable>
Parser:               </expression>
Parser:             </return-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func decl>
Parser:     <func decl>
  21: {  
  22:    int v1;  int v2;
Parser:       <func body>
Parser:         <var decl>
Parser:         </var decl>
Parser:         <var decl>
  23: 
  24:    LF = 10; ;
Parser:         </var decl>
Parser:         <statm list>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <number>
  25:    putchar('?');  putchar(' ');
Parser:                   </number>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <empty statm>
Parser:             </empty statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <number>
Parser:                     </number>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <number>
  26:    v1 = getint();   v2 = getint();
Parser:                     </number>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <function call>
Parser:                     <expr list>
Parser:                     </expr list>
Parser:                   </function call>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <assign-statm>
Parser:               <assignment>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <function call>
  27:    putint(gcd(v1,v2));  putchar(LF);
Parser:                     <expr list>
Parser:                     </expr list>
Parser:                   </function call>
Parser:                 </expression>
Parser:               </assignment>
Parser:             </assign statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <function call>
Parser:                       <expr list>
Parser:                         <expression>
Parser:                           <variable>
Parser:                           </variable>
Parser:                         </expression>
Parser:                         <expression>
Parser:                           <variable>
Parser:                           </variable>
Parser:                         </expression>
Parser:                       </expr list>
Parser:                     </function call>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <variable>
  28:    exit(0);
Parser:                     </variable>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:           <statement>
Parser:             <call-statm>
Parser:               <function call>
Parser:                 <expr list>
Parser:                   <expression>
Parser:                     <number>
  29: }
Parser:                     </number>
Parser:                   </expression>
Parser:                 </expr list>
Parser:               </function call>
Parser:             </call-statm>
Parser:           </statement>
Parser:         </statm list>
Parser:       </func body>
Parser:     </func decl>
Parser:   </program>
Tree:     int LF;
Tree:     
Tree:     int gcd (int a, int b)
Tree:     {
Tree:       while ((a) != (b)) {
Tree:         if ((a) < (b)) {
Tree:           b = (b) - (a);
Tree:         } else {
Tree:           a = (a) - (b);
Tree:         }
Tree:       }
Tree:       return a;
Tree:     }
Tree:     
Tree:     int main ()
Tree:     {
Tree:       int v1;
Tree:       int v2;
Tree:     
Tree:       LF = 10;
Tree:       ;
Tree:       putchar(63);
Tree:       putchar(32);
Tree:       v1 = getint();
Tree:       v2 = getint();
Tree:       putint(gcd(v1,v2));
Tree:       putchar(LF);
Tree:       exit(0);
Tree:     }
