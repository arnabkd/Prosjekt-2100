Parser:  <program>
Parser:    <func decl>
Parser:      <param decl>
1:  int f (int x) {
Parser:      </param decl>
Parser:      <statm list>
Parser:        <return-statm>
Parser:          <expression>
Parser:            <variable>
2:    return x+1;
Parser:              <operator>
3: }
Parser:              </operator>
Parser:              <number>
Parser:              </number>
Parser:            </variable>
Parser:          </expression>
Parser:        </return-statm>
Parser:      </statm list>
Parser:    </func decl>
Parser:    <func decl>
5: int main () {
Parser:      <var decl>
Parser:      </var decl>
Parser:      <statm list>
Parser:        <assign-statm>
Parser:          <assignment>
Parser:            <variable>
Parser:            </variable>
Parser:            <expression>
Parser:              <variable>
Parser:                <expression>
Parser:                  <number>
6:    int x;  x = f[2];  /* 'f' er en funksjon! */
7: }
Parser:                  </number>
Parser:                </expression>
Parser:              </variable>
Parser:            </expression>
Parser:          </assignment>
Parser:        </assign-statm>
Parser:      </statm list>
Parser:    </func decl>
Parser:  </program>
Tree:		int f(int x)
Tree:		{
Tree:			return x+1;
Tree:		}
Tree:		int main()
Tree:		{
Tree:			int main;
Tree:			x = f[2];
Tree:		}
